#!/usr/bin/env python

import config_communication as com 

HEADER_TEXT = '''
// This file has been autogenerated by configure.py please modify config_*.py
// files and run configure.py instead of modifying this file.

'''

def configureCommunication():

    # public header file
    with open(com.cPublicHeaderFile, 'w') as f:

        # header
        f.write(HEADER_TEXT)
        f.write('#ifndef COMMUNICATION_H_\n')
        f.write('#define COMMUNICATION_H_\n\n')

        # addresses
        f.write('typedef char Address_t;\n')
        f.write('typedef enum : Address_t {\n')
        s = ['\tCOM_ADDRESS_{:10s} = {:#04x}'.format(
                    p['name'].upper(), p['address']) for p in com.addresses]
        f.write(',\n'.join(s))
        f.write('\n} com_Address_e;\n')
        f.write('\n')

        # functions
        f.write('void getPack')

        # footer
        f.write('#endif\n')


    # private header file
    with open(com.cPrivateHeaderFile, 'w') as f:

        # packet
        f.write('#define COM_FRAGMENT_SIZE {}\n'.format(com.fragmentSize))

        # USB
        f.write('#define USB_BAUD_RATE {}\n'.format(com.usbBaudRate))
        f.write('#define USB_TIMEOUT {}\n'.format(com.usbTimeout))
        f.write('\n')

        # i2c
        f.write('typedef char I2C_address_t;\n')
        f.write('#define I2C_BAUD_RATE {}\n'.format(com.i2cBaudRate))
        f.write('\n')

        i2cAddresses = [-1]*0xff
        for p in com.addresses:
            if p['i2c_address'] is not None:
                n = p['address']
                i2cAddresses[n] = p['i2c_address']

        s = 'static const char I2C_ADDRESSES[128] = {\t'
        for n,p in enumerate(i2cAddresses):
            if n%8 == 0:
                s += '\n' + '\t'*3
            if p >= 0:
                s += ' {:#04x},'.format(p)
            else:
                s += ' {:4d},'.format(p)
        s = s[:-1] + '};\n'
        f.write(s)

        # footer
        f.write('#endif\n')


if __name__ == '__main__':

    configureCommunication()
