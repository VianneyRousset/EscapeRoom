#!/usr/bin/env python

import config_communication as com 
import config_devices as dev

HEADER_TEXT = '''
// This file has been autogenerated by configure.py please modify config_*.py
// files and run configure.py instead of modifying this file.
'''

def configureCommunication():

    # public header file
    with open(com.headerFile, 'w') as f:
        print('Writting "{}"'.format(com.headerFile))

        # header
        f.write(HEADER_TEXT)
        f.write('\n')
        f.write('#ifndef COMMUNICATION_CONFIG_H_\n')
        f.write('#define COMMUNICATION_CONFIG_H_\n')
        f.write('\n')

        # includes
        f.write('#include <stdint.h>\n')
        f.write('\n')

        # addresses
        f.write('typedef uint8_t Address_t;\n')
        f.write('\n')
        f.write('typedef enum : Address_t {\n')
        s = ['\tCOM_ADDRESS_{:10s} = {:#04x}'.format(
                    p['name'].upper(), p['address']) for p in com.addresses]
        f.write(',\n'.join(s))
        f.write('\n} com_Address_e;\n')
        f.write('\n')

        # packets
        f.write('#define COM_INPUT_QUEUE_N {}\n'.format(com.inputQueueSize))
        f.write('#define COM_OUTPUT_QUEUE_N {}\n'.format(com.outputQueueSize))
        f.write('\n')

        # UART 
        f.write('#define UART_BAUD_RATE {}\n'.format(com.uartBaudRate))
        f.write('#define UART_TIMEOUT {}\n'.format(com.uartTimeout))
        f.write('\n')

        # i2c
        f.write('typedef uint8_t I2C_address_t;\n')
        f.write('#define I2C_BAUD_RATE {}\n'.format(com.i2cBaudRate))
        f.write('\n')

        i2cAddresses = [-1]*0xff
        for p in com.addresses:
            if p['i2c_address'] is not None:
                n = p['address']
                i2cAddresses[n] = p['i2c_address']

        s = 'static const char I2C_ADDRESSES[{}]'.format(len(i2cAddresses))
        s += '{\t'
        for n,p in enumerate(i2cAddresses):
            if n%8 == 0:
                s += '\n' + '\t'*3
            if p >= 0:
                s += ' {:#04x},'.format(p)
            else:
                s += ' {:4d},'.format(p)
        s = s[:-1] + '};\n'
        f.write(s)

        # footer
        f.write('#endif\n')

def configureDevices():

    # public header file
    for i,d in dev.devices.items():
        path = 'arduinos/{}/device.h'.format(i) 
        with open(path, 'w') as f:
            print('Writting "{}"'.format(path))

            # header
            f.write(HEADER_TEXT)
            f.write('\n')
            f.write('#ifndef INFO_H_\n')
            f.write('#define INFO_H_\n')
            f.write('\n')

            # name
            f.write('#define DEVICE_NAME "{}"\n'.format(d['name']))
            f.write('#define DEVICE_ID {}\n'.format(d['id']))
            f.write('\n')

            # footer
            f.write('#endif\n')

if __name__ == '__main__':

    configureCommunication()
    configureDevices()
